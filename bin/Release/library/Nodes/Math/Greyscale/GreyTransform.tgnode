metadata
    name "Transform"
    color 0xFA7A39FF
    category "Core/Math/Greyscale"

    varname inp "In"
    varname posX "Pos X"
    varname posY "Pos Y"
    varname angle "Angle"
    varname scaleX "Size X"
    varname scaleY "Size Y"
    varname rep "Repeat"
    varname out "Out"

    display out
metadata

input greytex inp
param float posX
param float posY
param float angle
param float scaleX
param float scaleY
param bool rep
output greytex out

exec
{
    function sample(x, y)
        if rep then
            return inp[(x-1)%sizeX + 1][(y-1)%sizeY + 1]
        end

        if x < 1 then
            return 0
        end
        if y < 1 then
            return 0
        end
        if x > sizeX then
            return 0
        end
        if y > sizeY then
            return 0
        end

        return inp[x][y]
    end

    function rotate(vec, angle)
        -- angle in rad
        -- newX = oldX * cos(angle) - oldY * sin(angle)
        -- newY = oldX * sin(angle) + oldY * cos(angle)
        local newX = vec.x * math.cos(angle) - vec.y * math.sin(angle)
        local newY = vec.x * math.sin(angle) + vec.y * math.cos(angle)
        return {x=newX, y=newY}
    end

    local mid = {x=math.floor(sizeX/2), y=math.floor(sizeY/2)}

    for x=1, sizeX do
        for y=1, sizeY do
            local posTransPos = {x=x + math.floor(posX*sizeX), y=y + math.floor(posY*sizeY)}
            local vec = {x=posTransPos.x-mid.x,y=posTransPos.y-mid.y}
            vec = {x=vec.x*scaleX,y=vec.y*scaleY}
            local rotVec = rotate(vec, math.rad(angle))
            local newPos = {x=mid.x + rotVec.x,y=mid.y + rotVec.y}
            local sampled = sample(math.floor(newPos.x), math.floor(newPos.y))
            out[x][y] = sampled
        end
    end
}